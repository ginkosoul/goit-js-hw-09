{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACMC,EAAO,CACXC,kBAAmBC,SAASC,cAAc,eAC1CC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,yBAG7BI,EAAQ,EACRC,EAAU,KAGdR,EAAKC,kBAAkBQ,iBAAiB,SAExC,SAAiBC,GACfA,EAAMC,iBACN,IAAMC,EAAYZ,EAAKK,KAAKQ,MACtBC,EAAad,EAAKI,MAAMS,MAC9BN,EAAQQ,OAAOf,EAAKM,OAAOO,OAG3BL,EAAUQ,aAAY,WAqBxB,IAAuBC,EAAUb,GAAVa,EAnBLV,EAmBeH,EAnBRU,EAqBhB,IAAII,SAAQ,SAACC,EAASC,GAG3BC,YAAW,WAEaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEF,WAAUb,UAEpBgB,EAAO,CAAEH,WAAUb,S,GAEpBA,E,KAhCAoB,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUb,EAAKqB,EAALrB,MACjBN,EAAA4B,OAAOC,QAAQ,qBAAoCC,OAAfX,EAAS,QAAYW,OAANxB,EAAM,M,IAG1DyB,OAAM,SAAAJ,G,IAAGR,EAAQQ,EAARR,SAAUb,EAAKqB,EAALrB,MAClBN,EAAA4B,OAAOI,QAAQ,oBAAmCF,OAAfX,EAAS,QAAYW,OAANxB,EAAM,M,KAI5DG,GAAS,GACG,GACVwB,cAAcvB,E,GAGfI,GACHF,EAAMsB,cAAcC,QAAQ,QAAQC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  btnCreatePromices: document.querySelector('form>button'),\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n}\n\nlet count = 0;\nlet countId = null;\n\n// console.log(refs);\nrefs.btnCreatePromices.addEventListener('click', onClick)\n\nfunction onClick(event) {\n  event.preventDefault();\n  const stepValue = refs.step.value;\n  const delayValue = refs.delay.value;\n  count = Number(refs.amount.value);\n  // console.log(\"onClick body\",count,delayValue,stepValue);\n\n  countId = setInterval(() => {\n    // console.log(\"Interval body\");\n    createPromise(count, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    count -= 1;\n    if (count < 1){\n      clearInterval(countId);\n      // console.log(countId);\n    }\n  }, stepValue)\n  event.currentTarget.closest('form').reset();\n}\n\nfunction createPromise(position, delay) {\n  // const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    // console.log(`Fetching data for ${username}`);\n    // isBusy = true;\n    setTimeout(() => {\n      // Change value of isSuccess variable to simulate request status\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","btnCreatePromices","document","querySelector","delay","step","amount","$ce04d3a99e08e73b$var$count","$ce04d3a99e08e73b$var$countId","addEventListener","event","preventDefault","stepValue","value","delayValue","Number","setInterval","position","Promise","resolve","reject","setTimeout","Math","random","then","param","Notify","success","concat","catch","failure","clearInterval","currentTarget","closest","reset"],"version":3,"file":"03-promises.6e72b0e9.js.map"}